# -*- coding: utf-8 -*-
"""Python Assignment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cEFx-W9xmLXzit7PSTKAYDLM24INtVHy

#1 Explain the key features of Python that make it a popular choice for programming
ans : widely used in industry a lot of libraries (137000) ease of learning support offf big data data
visualisation capability support of big data open source and free to use.

#2 Describe the role of predefined keywords in Python and provide examples of how they are used in a
program

In Python, predefined keywords are reserved words that have special meanings and purposes within the language. These keywords are part of Python's syntax and cannot be used as identifiers (like variable names, function names, etc.) since they have pre-assigned functions. Keywords are fundamental to defining Python's structure, controlling flow, and handling logic.

Some key predefined Python keywords and examples of how they are used include:

### 1. **Control Flow Keywords**
   - **`if`, `elif`, `else`**: Used for conditional statements.
   - **Example**:
     ```python
     x = 10
     if x > 5:
         print("x is greater than 5")
     elif x == 5:
         print("x is 5")
     else:
         print("x is less than 5")
     ```

   - **`for`, `while`**: Used for looping.
   - **Example**:
     ```python
     for i in range(5):
         print(i)  # Prints numbers from 0 to 4

     count = 0
     while count < 5:
         print(count)
         count += 1
     ```

   -

#3 Compare and contrast mutable and immutable objects in Python with examples
In Python, mutable and immutable objects are two fundamental categories that determine whether an object's state or content can be changed after its creation. Understanding the distinction between them is crucial for writing efficient and bug-free code. Here's a comprehensive comparison between mutable and immutable objects in Python, complete with examples

Mutable Objects
Definition: Mutable objects are those that can be modified after creation.
Examples: Lists, dictionaries, sets, and most custom objects.
Behavior: For mutable objects, methods that modify the object (like append for lists or update for dictionaries) change the object in place, which means they don't create a new object in memory. This allows for efficient in-place updates but requires caution in shared references, as changes affect all references to the object.
Example
"""

# Creating a mutable list
my_list = [1, 2, 3]
print("Original list:", my_list)

# Modifying the list
my_list.append(4)
print("Modified list:", my_list)

"""#Immutable Objects
Definition: Immutable objects cannot be changed after they are created.
Examples: Integers, floats, strings, tuples, and frozensets.
Behavior: For immutable objects, any operation that would modify the object instead returns a new object. Because they are unchangeable, they are safer to use when you don’t want accidental modifications, and they are often hashable, which makes them usable as dictionary keys or set elements.
Example
"""

# Creating a string
greeting = "Hello"
print(f"Original string: {greeting}")  # Output: Hello

# Attempting to modify the string
try:
    greeting[0] = 'h'  # Raises TypeError
except TypeError as e:
    print(f"Error: {e}")  # Output: 'str' object does not support item assignment

# Creating a new string with modification
new_greeting = 'h' + greeting[1:]
print(f"New string: {new_greeting}")  # Output: hello

"""#4 Discuss the different types of operators in Python and provide examples of how they are used
In Python, operators are symbols or keywords that perform operations on variables and values. There are several types of operators in Python, each serving a specific purpose.
 examples
 #1. Arithmetic Operators
"""

a = 10
b = 3
print(a + b)   # Output: 13
print(a - b)   # Output: 7
print(a * b)   # Output: 30
print(a / b)   # Output: 3.333...
print(a % b)   # Output: 1
print(a ** b)  # Output: 1000
print(a // b)  # Output: 3

"""2. Comparison Operators
Comparison operators compare two values and return a Boolean value (True or False).
"""

a = 5
b = 3
print(a == b)  # Output: False
print(a != b)  # Output: True
print(a > b)   # Output: True
print(a < b)   # Output: False
print(a >= b)  # Output: True
print(a <= b)  # Output: False

"""#3. Logical Operators
Logical operators are used to combine conditional statements.
"""

a = True
b = False
print(a and b)  # Output: False
print(a or b)   # Output: True
print(not a)    # Output: False

"""#4. Assignment Operators
Assignment operators are used to assign values to variables.
"""

a = 10
a += 5   # a = a + 5 → a = 15
a *= 2   # a = a * 2 → a = 30
print(a) # Output: 30

"""#5. Bitwise Operators
Bitwise operators operate on binary numbers at the bit level.
"""

a = 5      # binary: 101
b = 3      # binary: 011
print(a & b)   # Output: 1
print(a | b)   # Output: 7
print(a ^ b)   # Output: 6
print(~a)      # Output: -6
print(a << 1)  # Output: 10
print(a >> 1)  # Output: 2

"""#6. Membership Operators
Membership operators are used to check if a value is present in a sequence like a list, tuple, or string.
"""

my_list = [1, 2, 3]
print(2 in my_list)       # Output: True
print(4 not in my_list)   # Output: True

"""#7. Identity Operators
Identity operators are used to check if two variables reference the same object in memory.


"""

a = [1, 2, 3]
b = a
c = [1, 2, 3]

print(a is b)      # Output: True (same object)
print(a is c)      # Output: False (different object)
print(a == c)      # Output: True (same values)

"""#5 Explain the concept of type casting in Python with examples

In Python, type casting (or type conversion) is the process of converting a variable from one data type to another. This is often necessary when you want to perform operations that require operands to be of the same type, or when you need to explicitly control how data is handled in an operation.

Python provides two types of casting:

Implicit Type Casting (automatically done by Python)
Explicit Type Casting (manually done by the programmer)
#1. Implicit Type Casting
In implicit casting, Python automatically converts one data type to another without any explicit instruction from the programmer. This often happens in operations where operands are of different types, and Python will automatically "promote" one of the types to avoid data loss.

Example:
"""

num_int = 10      # Integer
num_float = 3.5   # Float

# Adding integer and float results in a float (automatic conversion)
result = num_int + num_float
print(result)     # Output: 13.5
print(type(result)) # Output: <class 'float'>

"""#2. Explicit Type Casting
Explicit type casting, or type conversion, is when you manually convert a variable from one type to another using Python's built-in functions like int(), float(), str(), etc. This is often necessary when converting between types that are not implicitly compatible.

Common Type Casting Functions:
int() - converts to an integer
float() - converts to a floating-point number
str() - converts to a string
bool() - converts to a Boolean
Examples:
#a. Converting String to Integer
"""

num_str = "25"         # String
num_int = int(num_str) # Convert to integer
print(num_int)         # Output: 25
print(type(num_int))   # Output: <class 'int'>

"""#b. Converting Integer to String



"""

age = 30               # Integer
age_str = str(age)     # Convert to string
print(age_str)         # Output: '30'
print(type(age_str))   # Output: <class 'str'>

"""###c. Converting Float to Integer When converting a float to an integer, Python will drop the decimal part and retain only the integer part."""

num_float = 9.8
num_int = int(num_float)
print(num_int)         # Output: 9

"""###d. Converting String to Float"""

num_str = "3.14"
num_float = float(num_str)
print(num_float)       # Output: 3.14
print(type(num_float)) # Output: <class 'float'>

"""Important Note on Explicit Type Casting:
Not all conversions are valid. For example, attempting to convert a non-numeric string to an integer or float will raise an error.

python
Copy code

"""

text = "hello"
num = int(text)    # Raises ValueError: invalid literal for int()

"""Implicit casting: Python handles automatically (e.g., int + float → float).

Explicit casting: Requires specific functions (e.g., int(), float(), str())

#6 How do conditional statements work in Python? Illustrate with examples

Conditional statements in Python are used to execute code based on whether certain conditions are met. The main conditional statements are if, elif, and else, which allow you to control the flow of your program depending on different conditions.

Here’s how each of these statements works:

if Statement: The if statement evaluates a condition and executes the block of code that follows it if the condition is True.

elif (else if) Statement: The elif statement allows you to check multiple conditions after the initial if. If the if condition is False, Python moves to the elif condition. You can have multiple elif statements to check various conditions.

else Statement: The else statement executes when all previous conditions (if and elif) are False. Only one else is allowed, and it must be the last part of the conditional structure.

Here’s an example illustrating each of these statements:
"""

age = 20

if age < 18:
    print("You are a minor.")
elif age >= 18 and age < 65:
    print("You are an adult.")
else:
    print("You are a senior citizen.")

"""Explanation of the Example:

If age is less than 18, the output will be "You are a minor.".

If age is between 18 and 64, it will output "You are an adult.".

If age is 65 or above, it will output "You are a senior citizen.".
Example of Nested Conditional Statements

You can also nest conditional statements, meaning an if statement inside another if or elif.
Here’s an example:
"""

number = 15

if number > 0:
    if number % 2 == 0:
        print("The number is positive and even.")
    else:
        print("The number is positive and odd.")
else:
    print("The number is not positive.")

"""In this example:


If number is greater than 0, it goes on to check if it's even or odd.

If number is 0 or negative, it skips the nested conditions and outputs "The number is not positive.".

#7 Describe the different types of loops in Python and their use cases with examples
Python offers several types of loops, each with its own specific use cases and advantages. Here are the main types of loops:

#1. for Loop
The for loop is used to iterate over a sequence (like a list, tuple, dictionary, set, or string) or any other iterable object. It's best used when you know the number of iterations in advance.

Syntax:
for element in iterable:
    # code block to execute on each element

Example:
"""

# Iterating over a list
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)
# Output:
# apple
# banana
# cherry

"""Use Case:
When you need to process each item in a collection one by one.

Can also be used with range() for numeric ranges, such as counting.
"""

# Using range to iterate through numbers
for i in range(5):
    print(i)
# Output:
# 0
# 1
# 2
# 3
# 4

"""#2. while Loop
The while loop continues executing as long as a given condition is true. It’s best when the number of iterations isn’t predetermined.

Syntax:
while condition:
    # code block to execute
    Example:
"""

# Counting down from 5 to 1
count = 5
while count > 0:
    print(count)
    count -= 1
# Output:
# 5
# 4
# 3
# 2
# 1

"""#Use Case:
Useful when the loop should run until a condition changes (e.g., waiting for user input or until data processing is complete).
#3. Nested Loops
A loop inside another loop is called a nested loop. You can nest any type of loop (e.g., a for loop inside a while loop or vice versa). This is useful when dealing with multi-dimensional data structures like lists of lists.

Example:
"""

# Iterating over a 2D list
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
for row in matrix:
    for element in row:
        print(element, end=" ")
    print()
# Output:
# 1 2 3
# 4 5 6
# 7 8 9

"""3Use Case:
Often used in data processing tasks that require iterating over multiple dimensions.
#4. for loop with else and while loop with else
In Python, you can add an else clause to a for or while loop. The else part executes after the loop completes normally (i.e., without a break statement).

Example:
"""

# Using else with for loop
for i in range(3):
    print(i)
else:
    print("Loop completed without break.")
# Output:
# 0
# 1
# 2
# Loop completed without break.

"""#Use Case:
else is useful if you want to execute code only if the loop wasn’t terminated by break.
#5. Loop Control Statements
Python also provides statements to control the behavior of loops: break, continue, and pass.

break Statement
Exits the loop immediately, regardless of the loop condition.

Example:
"""

for i in range(5):
    if i == 3:
        break
    print(i)
# Output:
# 0
# 1
# 2

"""#Use Case:
Use break to stop the loop when a specific condition is met (e.g., searching for an item and stopping when found).
continue Statement
#Skips the rest of the code inside the loop for the current iteration and moves to the next iteration.

Example:
"""

for i in range(5):
    if i == 2:
        continue
    print(i)
# Output:
# 0
# 1
# 3
# 4

"""#Use Case:
Use continue when you need to skip specific conditions within a loop.
pass Statement
#Does nothing and is a placeholder. It's often used for code that’s yet to be written.

Example:
"""

for i in range(5):
    if i == 2:
        pass
    print(i)
# Output:
# 0
# 1
# 2
# 3
# 4

"""#Use Case:
Use pass as a placeholder during development when you haven’t written the logic yet.
"""